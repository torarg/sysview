#!/bin/sh

usage="usage: sysview [-hV] HTML_ROOT"
cache_dir="$HOME/.cache/sysview"
config_dir="/usr/local/share/sysview"
css_file="${config_dir}/style.css"

version="0.0.1"

err_exit() {
    echo "error: $@" 1>&2
    exit 1
}

html_head() {
    echo "$(cat <<EOF
<html>
    <head>
        <title>$1</title>
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
    <header>
        <div><a class="header_link" href=index.html>sysview</a></div>
        <div>:</div>
        <div>$1</div>
    </header>
    <main>
    <section class="tiles-container">
EOF
)"
}

html_foot() {
    echo "$(cat <<EOF
    </section>
    </main>
    <footer>with lots of luv for simple shit <3</footer>
    </body>
</html>
EOF
)"
}


parse_report() {
    report_started=0
    report=""

    while read line; do
        if [[ "$line" == "Hostname: "* ]] ; then
            report_started=1
            hostname=$(echo "$line" | awk '{ print $2 }')
            report="${report}${line}\n"
        elif [[ "$line" == "Date: "* ]] && [ "$report_started" -eq "1" ]; then
            date=$(echo "$line" | cut -f 2- -d " ")
            report="${report}${line}\n"
        elif [[ "$line" == "Type: "* ]] && [ "$report_started" -eq "1" ]; then
            type=$(echo "$line" | cut -f 2- -d " ")
            report="${report}${line}\n"
        elif [ "$report_started" -eq "1" ]; then
            report="${report}${line}\n"
        fi
    done

    if [ -z "$hostname" ] || [ -z "$date" ] || [ -z "$report" ]; then
        echo "failed parsing report"
        exit 0
    fi

    [ -z "$type" ] && type="sysreport" # fallback for now, since this is a new field

}

get_worst_status() {
    if [ ! -f ${cache_dir}/${hostname}.html.detail.part.* ]; then
        text="$report"
    else
        text="$(cat ${cache_dir}/${hostname}.html.detail.part.*)"
    fi

    if echo "$text" | grep -q "CRITICAL: "; then
        worst_status="crit"
    elif echo "$text" | grep -q "WARNING: "; then
        worst_status="warn"
    elif echo "$text" | grep -q "OK: "; then
        worst_status="ok"
    else
        worst_status="unknown"
    fi
}

update_cache() {
    worst_status="unknown"
    parse_report
    get_worst_status
    overview_part="${cache_dir}/${hostname}.html.overview.part"
    detail_view_part="${cache_dir}/${hostname}.html.detail.part.${type}"
    [ -f "$overview_part" ] && rm $overview_part
    [ -f "$detail_view_part" ] && rm $detail_view_part

    cat > ${overview_part} <<EOF
<a href="$hostname.html">
    <div class="tile_$worst_status">
        <h4>$hostname</h5>
        <p>$date</p>
    </div>
</a>
EOF


    cat >> $detail_view_part <<EOF
        <pre>
$(echo "$report")
        </pre>
EOF

}

render_cache() {
    tmp_index_file="${cache_dir}/index.html"
    tmp_detail_file="${cache_dir}/${hostname}.html"

    # render overview
    html_head "overview" > $tmp_index_file
    for file in ${cache_dir}/*.overview.part; do
        if grep -q tile_crit $file; then
            cat $file >> $tmp_index_file
        fi
    done
    for file in ${cache_dir}/*.overview.part; do
        if grep -q tile_ok $file; then
            cat $file >> $tmp_index_file
        fi
    done
    html_foot >> $tmp_index_file
    cp $tmp_index_file $html_root/index.html


    # render detail views
    html_head "$hostname" > $tmp_detail_file
    for file in ${cache_dir}/${hostname}.html.detail.part.*; do
        cat $file >> $tmp_detail_file
    done
    html_foot >> $tmp_detail_file
    cp $tmp_detail_file $html_root/$hostname.html
}

while getopts :hV flag; do
    case "${flag}" in
        h) echo "$usage" && exit 0 ;;
        V) echo "$version" && exit 0 ;;
        ?) err_exit "invalid args" ;;
    esac
done
shift $(($OPTIND - 1))

html_root="$1"

[ -z "$html_root" ] && err_exit "no html root"
[ ! -d "$cache_dir" ] && mkdir -p "$cache_dir" 

cp $css_file $html_root/
update_cache
render_cache
